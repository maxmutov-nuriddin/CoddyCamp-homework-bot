from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import aiohttp

TOKEN = '7342199254:AAEaBQVpw5Ug87sYgegJG5E22RKXpZPauFU'
ADMIN_ID = 1604384939
MOCKAPI_URL = 'https://67056516031fd46a830fca90.mockapi.io/chat_users'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! ‚ú®\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –º—ã –ø–æ–ª—É—á–∏–º –µ–≥–æ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üîî'
    )

async def forward_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat.id
    message_text = update.message.text or update.message.caption or "<–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞>"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ caption –≤ MockAPI
    async with aiohttp.ClientSession() as session:
        try:
            await session.post(MOCKAPI_URL, json={"user_id": user_id, "message": message_text})
        except Exception as e:
            await update.message.reply_text(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ MockAPI: {e}')

    prefix = f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:'

    try:
        if update.message.text:
            await context.bot.send_message(chat_id=ADMIN_ID, text=f'{prefix}\n\n{update.message.text}')
        elif update.message.document:
            await context.bot.send_document(chat_id=ADMIN_ID, document=update.message.document.file_id, caption=f'{prefix} {update.message.caption or ""}')
        elif update.message.photo:
            await context.bot.send_photo(chat_id=ADMIN_ID, photo=update.message.photo[-1].file_id, caption=f'{prefix} {update.message.caption or ""}')
        elif update.message.video:
            await context.bot.send_video(chat_id=ADMIN_ID, video=update.message.video.file_id, caption=f'{prefix} {update.message.caption or ""}')
        elif update.message.audio:
            await context.bot.send_audio(chat_id=ADMIN_ID, audio=update.message.audio.file_id, caption=f'{prefix} {update.message.caption or ""}')
        elif update.message.voice:
            await context.bot.send_voice(chat_id=ADMIN_ID, voice=update.message.voice.file_id, caption=f'{prefix} {update.message.caption or ""}')
        else:
            await context.bot.send_message(chat_id=ADMIN_ID, text=f'{prefix} (–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è)')
        
        await update.message.reply_text('‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏–ª–∏ —Ñ–∞–π–ª) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')
    except Exception as e:
        await update.message.reply_text(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∞–¥–º–∏–Ω—É: {e}')


async def forward_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.chat.id != ADMIN_ID:
        return

    if update.message.text:
        parts = update.message.text.split(maxsplit=1)
        user_id = int(parts[0]) if len(parts) > 0 and parts[0].isdigit() else None
        message_to_user = parts[1] if len(parts) > 1 else ""

        if user_id and message_to_user:
            await context.bot.send_message(chat_id=user_id, text=f'–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message_to_user}')
            await context.bot.send_message(chat_id=ADMIN_ID, text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}.')
        else:
            await context.bot.send_message(chat_id=ADMIN_ID, text='–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ID –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.')

    elif update.message.document:
        user_id = int(update.message.caption.split()[0]) if update.message.caption else None
        if user_id:
            try:
                await context.bot.send_document(chat_id=user_id, document=update.message.document.file_id)
                await context.bot.send_message(chat_id=ADMIN_ID, text=f'–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {user_id}.')
            except Exception as e:
                await context.bot.send_message(chat_id=ADMIN_ID, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}')

    elif update.message.photo:
        user_id = int(update.message.caption.split()[0]) if update.message.caption else None
        if user_id:
            try:
                await context.bot.send_photo(chat_id=user_id, photo=update.message.photo[-1].file_id)
                await context.bot.send_message(chat_id=ADMIN_ID, text=f'–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}.')
            except Exception as e:
                await context.bot.send_message(chat_id=ADMIN_ID, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}')


def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    # üëá –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞
    application.add_handler(MessageHandler(~filters.COMMAND & ~filters.User(ADMIN_ID), forward_user_message))

    # üëá –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞
    application.add_handler(MessageHandler(filters.User(ADMIN_ID), forward_admin_message))

    application.run_polling()

if __name__ == '__main__':
    main()
