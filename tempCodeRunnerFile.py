from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, ConversationHandler, filters
)
import aiohttp

from warnings import filterwarnings
from telegram.warnings import PTBUserWarning

filterwarnings(action="ignore", message=r".*CallbackQueryHandler", category=PTBUserWarning)


# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = '7342199254:AAEaBQVpw5Ug87sYgegJG5E22RKXpZPauFU'
ADMIN_ID = 1604384939
MOCKAPI_URL = 'https://67056516031fd46a830fca90.mockapi.io/chat_users'

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ ===
REPLYING = range(1)
admin_reply_targets = {}  # –°–ª–æ–≤–∞—Ä—å {admin_id: user_id}


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! ‚ú®\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –º—ã –ø–æ–ª—É—á–∏–º –µ–≥–æ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üîî'
    )


# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ===
async def forward_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat.id
    message_text = update.message.text or update.message.caption or "<–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞>"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ MockAPI
    async with aiohttp.ClientSession() as session:
        try:
            await session.post(MOCKAPI_URL, json={"user_id": user_id, "message": message_text})
        except Exception as e:
            await update.message.reply_text(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ MockAPI: {e}')

    prefix = f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:'
    reply_markup = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")
    ]])

    try:
        if update.message.text:
            await context.bot.send_message(chat_id=ADMIN_ID, text=f'{prefix}\n\n{update.message.text}', reply_markup=reply_markup)
        elif update.message.document:
            await context.bot.send_document(chat_id=ADMIN_ID, document=update.message.document.file_id,
                                            caption=f'{prefix}\n\n{update.message.caption or ""}', reply_markup=reply_markup)
        elif update.message.photo:
            await context.bot.send_photo(chat_id=ADMIN_ID, photo=update.message.photo[-1].file_id,
                                         caption=f'{prefix}\n\n{update.message.caption or ""}', reply_markup=reply_markup)
        elif update.message.video:
            await context.bot.send_video(chat_id=ADMIN_ID, video=update.message.video.file_id,
                                         caption=f'{prefix}\n\n{update.message.caption or ""}', reply_markup=reply_markup)
        elif update.message.audio:
            await context.bot.send_audio(chat_id=ADMIN_ID, audio=update.message.audio.file_id,
                                         caption=f'{prefix}\n\n{update.message.caption or ""}', reply_markup=reply_markup)
        elif update.message.voice:
            await context.bot.send_voice(chat_id=ADMIN_ID, voice=update.message.voice.file_id,
                                         caption=f'{prefix}\n\n{update.message.caption or ""}', reply_markup=reply_markup)
        else:
            await context.bot.send_message(chat_id=ADMIN_ID, text=f'{prefix}\n\n(–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è)', reply_markup=reply_markup)

        await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∞–¥–º–∏–Ω—É: {e}")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –æ—Ç –∞–¥–º–∏–Ω–∞ ===
async def handle_reply_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query: CallbackQuery = update.callback_query
    await query.answer()

    user_id = int(query.data.split("_")[1])
    admin_reply_targets[query.from_user.id] = user_id

    await context.bot.send_message(chat_id=ADMIN_ID, text=f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç/—Ñ–∞–π–ª) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    return REPLYING


# === –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ REPLYING ===
async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    admin_id = update.message.chat.id
    user_id = admin_reply_targets.get(admin_id)

    if not user_id:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END

    try:
        if update.message.text:
            await context.bot.send_message(chat_id=user_id, text=f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{update.message.text}")
        elif update.message.document:
            await context.bot.send_document(chat_id=user_id, document=update.message.document.file_id,
                                            caption=update.message.caption)
        elif update.message.photo:
            await context.bot.send_photo(chat_id=user_id, photo=update.message.photo[-1].file_id,
                                         caption=update.message.caption)
        elif update.message.video:
            await context.bot.send_video(chat_id=user_id, video=update.message.video.file_id,
                                         caption=update.message.caption)
        elif update.message.audio:
            await context.bot.send_audio(chat_id=user_id, audio=update.message.audio.file_id,
                                         caption=update.message.caption)
        elif update.message.voice:
            await context.bot.send_voice(chat_id=user_id, voice=update.message.voice.file_id,
                                         caption=update.message.caption)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.")

        await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    return ConversationHandler.END


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞
    application.add_handler(MessageHandler(~filters.COMMAND & ~filters.User(ADMIN_ID), forward_user_message))

    # FSM: –û—Ç–≤–µ—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∞
    reply_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_reply_button, pattern=r"^reply_\d+$")],
        states={
            REPLYING: [MessageHandler(filters.User(ADMIN_ID), handle_admin_reply)]
        },
        fallbacks=[]
    )
    application.add_handler(reply_conv)

    application.run_polling()


if __name__ == '__main__':
    main()
